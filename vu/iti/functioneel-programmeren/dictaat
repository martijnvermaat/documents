ITI functioneel programmeren
============================

Hoewel het boek van Jason Hickey goed in elkaar
zit is het veel te veel om in twee weken te leren
en toe te passen.

Ik zou zelf liever iets meer theoretische aspecten
over FP behandelen met daarbij wat opdrachten die
dit illustreren.

Aan de andere kant; als er iets nieuws geschreven
wordt, is dat net zo moeilijk om kort te houden.

Een opzetje voor een inleidend dictaatje bij de
opgaven:

  Steeds algemeen over FP talen en daarna meer
  specifiek over ML en OCaml.

  Functies
  Pattern matching
  Strict/lazy
  Currying
  Side-effects
  Recursie
  Lambda Calculus
  Type systeem
  Toepassingen

Terzijde: op sommige van deze punten heb ik nog
geen goed idee hoe ML verschilt van Haskell:

  Type systeem: in Haskel iets expressiever?
  Type inference: gelijk?
  Pattern matching: in Haskell meer mogelijk?
  Side-effects: is Haskell 100% puur?

Grootste verschil is dat Haskell lazy is en ML
strict.


Mogelijke opgaven
=================

De opgaven op
http://www.cs.caltech.edu/courses/cs134/cs134b/2002/index.html
zijn veel te groot en moeilijk voor onze twee
weken. Bovendien zijn ze erg gericht op
compilerbouw, iets dat niet zo zeer binnen de
rest van ITI past.
Opgave bij lab 1 (splay trees) zou nog kunnen,
maar dan is er waarschijnlijk nog weinig ruimte
voor meer.


Ideeen:

* Definieer Church Numerals
  http://kjew.xs4all.nl/repository/hacks/ocaml/church.ml

* Definieer datatype Naturals (Peano algebra)
  http://kjew.xs4all.nl/repository/hacks/ocaml/naturals.ml

* Definieer een boom datatype

* Definieer een datatype Lambda Calculus termen
  Misschien te lastig? Wel veel leuke operaties
  op te doen.
  http://kjew.xs4all.nl/repository/hacks/ocaml/lc.ml


Hoe testen we opgaven? Moet er code bijgeleverd
worden die laat zien dat er gedaan is wat
gevraagd werd?

We kunnen niet het module systeem van OCaml gaan
behandelen lijkt me, hoewel type signaturen wel
aardig aansluiten op het equationele logica deel.


Opmerkingen bij de tekst van Jason Hickey
=========================================

De uitleg van Red-black trees vond ik niet echt
duidelijk. Op Wikipedia bijvoorbeeld vind ik een
duidelijker uitleg:
http://en.wikipedia.org/wiki/Red-black_tree

Alles vanaf hoofdstuk 7 moeten we voor deze twee
weken maar vergeten (exceptions, arrays, records,
i/o, modules, OO).
